#include <iostream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

int vertex;
vector <string> vec;
//===============================================================================
void filling(bool **mas) {
	string str;
	for (int i = 0; i < vertex; i++) {
		for (int j = 0; j < vertex; j++) {
			mas[i][j] = 0;
		}
	}
	while ((getline(cin, str)) && (vec.size() < vertex)) {
		vec.push_back(str);
	}
	vec.push_back(str);
	for (int i = 1; i <= vertex; i++) {
		string buf = vec[i];
		string intbuf;
		for (int j = 0; j <= buf.size(); j++){
			if ((buf[j] == ' ') or (j == buf.size())) {
				if (intbuf[0] != '0') {
					mas[i - 1][stoi(intbuf) - 1] = 1;
				}
				intbuf.clear();
				continue;
			}
			else {
				intbuf = intbuf + buf[j];
				//cout << intbuf << ' ';
			}
		}
	}
};
//===============================================================================
void print(bool **mas) {
	for (int i = 0; i < vertex; i++) {
		for (int j = 0; j < vertex; j++) {
			cout << mas[i][j] << ' ';
		}
		cout << '\n';
	}
}
//===============================================================================
stack <int> st_nvisited;
vector <int> vec_visited;
//===============================================================================
bool flag = 0;

void dfs(bool **mas, bool **mas_dost, int point){
    vec_visited.push_back(st_nvisited.top());
    st_nvisited.pop();
    for (int i = 0; i < vertex; i++){
        if (mas[point][i] == 1){
            mas_dost[point][i] = 1;
            for (int j  = 0; j < vec_visited.size(); j++){
                if (vec_visited[j] == i){
                    flag = 1;
                }
            }
            if (flag == 0){
                st_nvisited.push(i);
            }
            flag = 0;
        }
    }
    if (!st_nvisited.empty()){
        dfs(mas, mas_dost, st_nvisited.top());
    }
    else {
        while (!vec_visited.empty()){
            mas_dost[vec_visited[0]][vec_visited[vec_visited.size() - 1]] = 1;
            vec_visited.pop_back();
        }
    }
}
//===============================================================================
int main()
{
	cin >> vertex;
	bool** mas = new bool* [vertex];
	for (int i = 0; i < vertex; i++) {
		mas[i] = new bool[vertex];
	}

	filling(mas);
	print(mas);
    
    bool** mas_dost = new bool* [vertex];
	for (int i = 0; i < vertex; i++) {
		mas_dost[i] = new bool[vertex];
	}
    
    
    cout << "\n";
    
    for (int i = 0; i < vertex; i++){
        st_nvisited.push(i);
        dfs(mas, mas_dost, i);
    }
    
    print(mas_dost);
    
	for (int i = 0; i < vertex; i++) {
		delete[] mas[i];
		delete[] mas_dost[i];
	}
	delete[] mas;
	delete[] mas_dost;
}
