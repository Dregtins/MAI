#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

int size = 10; //Задание размера массива строк
int string_size = 3; //Задание размера строки

//===================================================================
//Функция генерированния строк
char symbols[37]  = "abcdefghijklmnopqrstuvwxyz0123456789";
string string_generator(){
    string a;
    int random;
    for (int i = 0; i < string_size; i++) {
        random = rand()%(36);
        a.push_back(symbols[random]);
    }
    return a;
};
//===================================================================
//Фукнция хэширования
string hasher(string a){
    string hashed_string;
    int asci;
    char symb[3];
    for (int i = 0; i < string_size; i++){
        asci = ((a[i] * 3) + 2)/10;
        hashed_string += to_string(asci);
    };
    cout << hashed_string <<endl;
    while(hashed_string.size() != 32){
        hashed_string += '3';
    }
    return hashed_string;
};
//===================================================================
//Фукнция счёта коллизий;
int collision_count(string mas_hash[]){
    int counter = 0;
    for(int i = 0; i < (size - 1); i++){
        for (int j = (i + 1); j < size; j++){
            if(mas_hash[i] == mas_hash[j]){
                counter++;
            }
        }
    }
    return counter;
}


int main()
{
    srand(time(NULL));
    string massiv_string[size];
    string massiv_hash[size];
    for(int k = 0; k < 3){
    //===================================================================
    //Генерирование строк
        for(int i = 0; i < size; i++){
           massiv_string[i] = string_generator();
        }
    //===================================================================
    //Вывод сгенерированных строк
    /*    for(int i = 0; i < size; i++){
           cout << massiv_string[i] << endl;
        }*/
    //===================================================================
    //Хэширование строк 
        for(int i = 0; i < size; i++){
           massiv_hash[i] = hasher(massiv_string[i]);
        }
    //===================================================================
    //Вывод хэшей
       /* cout << "Хэшированные строки" << endl;
    
        for(int i = 0; i < size; i++){
           cout << massiv_hash[i] << endl;
        }*/
    //===================================================================
    //Подсчёт времени сравнения строк
        int start_time = clock();
        for(int i = 0; i < (size - 1); i++){
            for (int j = (i + 1); j < size; j++){
                if (massiv_string[i] == massiv_string[j]){
                }
            }
        }
        int end_time = clock();
        cout << "Время сравнения строк: " << (end_time - start_time) << endl;
    //===================================================================
    //Подсчёт времени сравнения хэшей
        start_time = clock();
        for(int i = 0; i < (size - 1); i++){
            for (int j = (i + 1); j < size; j++){
                if (massiv_hash[i] == massiv_hash[j]){
                }
            }
        }
        end_time = clock();
        cout << "Время сравнения хэшей: " << (end_time - start_time) << endl;
    //===================================================================
    //Счёт коллизий
        cout << "Количество коллизий: "<< collision_count(massiv_hash) << endl;
    //===================================================================
    string_size++;
    }
    return 0;
}
