#include <iostream>
#include <locale>
#include <stdexcept>
#include <new>
 
using namespace std;

template <typename T>

class Arr {
private:
	int size;
	T *mas;
 
public:
	//=======================================================================================================
	Arr(int i) {
		this -> size = i;
		this -> mas = new T[size];
	    
	};
	//=======================================================================================================
	~Arr() {
		delete [] mas; 
	};
	//=======================================================================================================
	Arr(const Arr& other) {
		this -> size = other.size;
		
		this -> mas = new T[other.size];
		
		for (int i = 0; i < other.size; i++) {
			this->mas[i] = other.mas[i];
		};
	};
	//=======================================================================================================
	Arr<T> operator -(const Arr & other) {
		int a, b;
		a = this->size;
		b = other.size;
		Arr temp(a>b?a:b);
		if (this->size > other.size) {
			temp.SetNewSize(this->size);
			for (int i = 0; i < other.size; i++) {
				temp.mas[i] = this->mas[i] - other.mas[i];
			}
			while (b != a) {
				temp.mas[b] = this->mas[b];
				b++;
			}
		}
		else if (this->size < other.size) {
			temp.SetNewSize(other.size);
			for (int i = 0; i < this->size; i++) {
				temp.mas[i] = this->mas[i] - other.mas[i];
			}
			while (a != b) {
				temp.mas[a] = 0 - other.mas[a];
				a++;
			}
		}
		else {
			temp.SetNewSize(this->size);
			for (int i = 0; i < size; i++) {
				temp.mas[i] = this->mas[i] - other.mas[i];
			}
		}
		return temp;
	}
	//=======================================================================================================
	Arr<T> operator +(const Arr& other) {
		int a, b;
		a = this->size;
		b = other.size;
		Arr temp(a>b?a:b);
		if (this->size > other.size) {
			for (int i = 0; i < other.size; i++) {
				temp.mas[i] = this->mas[i] + other.mas[i];
			};
			while (b != a) {
				temp.mas[b] = this->mas[b];
				b++;
			}
		}
		else {
			for (int i = 0; i < this->size; i++) {
				temp.mas[i] = this->mas[i] + other.mas[i];
			}
			while (a != b) {
				temp.mas[a] = other.mas[a];
				a++;
			}
		}
		return temp;
	};
	//=======================================================================================================
	Arr<T> operator =(const Arr& other) {
		this -> size = other.size;
		for (int i = 0; i < other.size; i++){
		    this -> mas[i] = other.mas[i];
		}
		return *this;
	};
	//=======================================================================================================
	friend ostream& operator<<(ostream &os, const Arr<T> &a) {
	    for (int i = 0; i < a.size; i++){
	        os << a.mas[i] << " ";
	    }
	    return os << endl;
    };
	//=======================================================================================================
	void SetNewSize(const int i) {
		T* newMas = new T[i];
		delete mas;
		mas = newMas;
		size = i;
	};
	//=======================================================================================================
	void SetArr(const int i, const T value) {
		if ((i < 0) or (i > size - 1)) {
			throw out_of_range("Выход за границы массива");
		}
		if (typeid(int) == typeid(T)){
		    if ((value < -100) or (value > 100)) {
		      throw invalid_argument("Число должно принадлежать промежутку [-100;100]");
	    	}
		}
		mas[i] = value;
 
	};
	//=======================================================================================================
	int GetArr(const int i) {
		if ((i < 0) or (i > size - 1)) {
			throw out_of_range("Выход за границы массива");
		}
		cout << i << " элемент массива = " << mas[i] << "\n";
		return mas[i];
	}
	//=======================================================================================================
	void printArr() {
		for (int i = 0; i != size; i++) {
			cout << mas[i] << " ";
		}
		cout << "\n";
	}
	//=======================================================================================================
	void Push_Back(T value) {
		int a;
		const type_info& ti1 = typeid(a);
		const type_info& ti2 = typeid(T);
		if (ti1 == ti2){
		    if ((value < -100) or (value > 100)) {
		      throw invalid_argument("Число должно принадлежать промежутку [-100;100]");
	    	}
		}
 
			T* newMas = new T[size + 1];
			for (int i = 0; i < size; i++) {
				newMas[i] = mas[i];//memcopy
			};
			newMas[size] = value;
			delete[] mas;
			mas = newMas;
			size = size + 1;
	//=======================================================================================================
	};
	friend int distance(const Arr<T> &a, const Arr<T> &b){
            int dist = 0;
            const type_info& ti1 = typeid(dist);
	        const type_info& ti2 = typeid(T);
	        if (ti2 != ti1){
		        throw bad_typeid();
	        }
            for (int i = 0; i < a.size; i++){
               dist = dist + ((a.mas[i] - b.mas[i])*(a.mas[i] - b.mas[i]));
            }
	        return dist;
    };
};
    
int main()
{
	setlocale(LC_ALL, "Russian");
 
	try{
	    Arr<int> a(5);
	    a.SetArr(0, 5);
	    a.SetArr(1, 99);
	    a.SetArr(2, 3);
	    a.SetArr(3, 2);
    	a.SetArr(4, 1);
	    a.printArr();	
 
	    Arr<int> b(a);
	    b.Push_Back(5);
	    b.printArr();
 
    	Arr<int> c = a + b;
    	c.printArr();
 
    	Arr<int> d = a - b;
    	d.printArr();
    	
    	Arr<int> f(0);
    	f = a;
    	cout << f;
    	
    	b.SetArr(0, 1);
    	cout << distance(a,b);
	}
	catch(const char* msg){
	    cout << msg << "\n";
	};
	return 0;
}
