#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <sstream>

using namespace std;

int size = 2000; //Задание размера массива строк
int string_size = 3; //Задание размера строки

//===================================================================
//Функция генерированния строк
char symbols[37]  = "abcdefghijklmnopqrstuvwxyz0123456789";
string string_generator(){
    string a;
    int random;
    for (int i = 0; i < string_size; i++) {
        random = rand()%(36);
        a.push_back(symbols[random]);
    }
    return a;
};
//===================================================================
//Фукнция хэширования
int hasher(string a){
    string hashed_string;
    int asci;
    char symb[3];
    for (int i = 0; i < string_size; i++){
        asci = ((a[i] * 13) + 7)/10;
        hashed_string += to_string(asci);
    };
    if(hashed_string.size() < 16){
        while(hashed_string.size() != 16){
            hashed_string += '3';
        }
    }
    else{
        hashed_string.resize(16);
    }
    uint64_t b;
    istringstream iss(hashed_string.c_str()); //вывод данных в поток iss
    iss >> b;//запись данных из потока в b
    return b;
};
//===================================================================
//===================================================================
//Фукнция хэширования
string hasher2(string a){
    string hashed_string;
    int asci;
    char symb[3];
    for (int i = 0; i < string_size; i++){
        asci = ((a[i] * 13) + 7)/10;
        hashed_string += to_string(asci);
    };
    if(hashed_string.size() < 16){
        while(hashed_string.size() != 16){
            hashed_string += '3';
        }
    }
    else{
        hashed_string.resize(16);
    }
    return hashed_string;
};
//===================================================================
//Фукнция счёта коллизий
int collision_count(int mas_hash[]){
    int counter = 0;
    for(int i = 0; i < (size - 1); i++){
        for (int j = (i + 1); j < size; j++){
            if(mas_hash[i] == mas_hash[j]){
                counter++;
            }
        }
    }
    return counter;
}
//===================================================================



int main()
{
    srand(time(NULL));
    string massiv_string[size];
    int massiv_hash[size];
    string massiv_hash2[size];
    for(int k = 0; k < 4; k++){
        cout << "Для размера строки: " << string_size<< endl;
    //===================================================================
    //Генерирование строк
        for(int i = 0; i < size; i++){
           massiv_string[i] = string_generator();
        }
    //===================================================================
    //Хэширование строк 
        for(int i = 0; i < size; i++){
           massiv_hash[i] = hasher(massiv_string[i]);
        }
        
    //===================================================================
    //Хэширование строк 2
        for(int i = 0; i < size; i++){
           massiv_hash2[i] = hasher2(massiv_string[i]);
        }
        
    //===================================================================
    //Подсчёт времени сравнения строк
        clock_t start_time = clock();
        for(int i = 0; i < (size - 1); i++){
            for (int j = (i + 1); j < size; j++){
                if (massiv_string[i] == massiv_string[j]){
                }
            }
        }
        clock_t end_time = clock();
        double timing = (double)(end_time - start_time)/ CLOCKS_PER_SEC;
        cout << "Время сравнения строк: "<< timing << endl;
    //===================================================================
    //Подсчёт времени сравнения хэшей
        start_time = clock();
        for(int i = 0; i < (size - 1); i++){
            for (int j = (i + 1); j < size; j++){
                if (massiv_hash[i] == massiv_hash[j]){
                }
            }
        }
        end_time = clock();
        timing = (double)(end_time - start_time)/ CLOCKS_PER_SEC;
        cout << "Время сравнения хэшей: " << timing << endl;
    //===================================================================
    //Подсчёт времени сравнения строковых хэшей
        start_time = clock();
        for(int i = 0; i < (size - 1); i++){
            for (int j = (i + 1); j < size; j++){
                if (massiv_hash2[i] == massiv_hash2[j]){
                }
            }
        }
        end_time = clock();
        timing = (double)(end_time - start_time)/ CLOCKS_PER_SEC;
        cout << "Время сравнения строковых хэшей: " << timing << endl;
    //===================================================================
    //Счёт коллизий
        cout << "Количество коллизий: "<< collision_count(massiv_hash) << endl << endl;
    //===================================================================
    string_size++;
    }
    return 0;
}
